# PostgreSQL. Versions 9.1 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On OS X with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On OS X with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  # TODO: Configure DATABASE_URL in config/application.yml
  url: <%= ENV["DATABASE_URL"] %>
  # NOTE: In some cases we'll use RAILS_MAX_THREADS as the sidekiq concurrency.
  # Indeed, sidekiq will use this value internally by default if it is set and
  # concurrency isn't explicitly configured. However, this means the worker
  # thread count is tied to the web (Puma) thread count, which makes less sense
  # as each server type is optimized for performance. So to accommodate more
  # advanced configurations we will allow for the pool size to be set at a value
  # specific to the server type (i.e. DB_POOL), but fall back to
  # RAILS_MAX_THREADS which will be an appropriate default pool size for both
  # server types if concurrency doesn't differ between them.
  #
  # We'll also want to add a connection "buffer" (increase the pool size by a
  # few connections) just in case other libraries eagerly grab connections
  # from the pool before sidekiq spawns the workers, leading to connection
  # timeouts from sidekiq. See the comment from Andrew Babichev here:
  # https://gist.github.com/nateberkopec/56936904705da5a1fa8e6f74cb08c012
  pool: <%= (ENV['DB_POOL'] || ENV['RAILS_MAX_THREADS'] || 5).to_i + 5 %>

development:
  <<: *default
  database: verumex_development
  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database.
  #username: rails_new

  # The password associated with the postgres role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: verumex_test
# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  <<: *default
